"""
–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–µ–π.

–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∏
–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ –≤—Å—Ç—Ä–µ—á–∏.
"""

from datetime import datetime
import os
from typing import List
from src.services.audio_capture import AudioCaptureService
from src.services.stt_service import STTService
from src.services.summary_service import SummaryService
from src.services.transcript_processor import TranscriptProcessor
from src.models.transcript import TranscriptSegment, MeetingTranscript
from src.observers.transcript_observer import TranscriptObserver
from src.utils.logger import get_logger

logger = get_logger(__name__)

class MeetingController:
    """
    –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –≤—Å—Ç—Ä–µ—á–∏.
    
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏:
    –∑–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞
    –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏.
    """
    
    def __init__(
        self,
        audio_service: AudioCaptureService,
        stt_service: STTService,
        summary_service: SummaryService,
        transcript_processor: TranscriptProcessor
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—Å—Ç—Ä–µ—á–∏.
        
        Args:
            audio_service: –°–µ—Ä–≤–∏—Å –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ
            stt_service: –°–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è
            summary_service: –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
            transcript_processor: –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        """
        self.audio_service = audio_service
        self.stt_service = stt_service
        self.summary_service = summary_service
        self.transcript_processor = transcript_processor
        self.observers: List[TranscriptObserver] = []
        self.segments: List[TranscriptSegment] = []
        self.is_meeting_active = False
        self.start_time = None
        logger.info("MeetingController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def add_observer(self, observer: TranscriptObserver):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π.
        
        Args:
            observer: –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ö
        """
        self.observers.append(observer)
        
    def start_meeting(self):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É –∏ –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞—Ö.
        """
        logger.info("–ù–∞—á–∞–ª–æ –≤—Å—Ç—Ä–µ—á–∏")
        self.is_meeting_active = True
        self.segments = []
        self.start_time = datetime.now()
        
        try:
            # –ó–∞—Ö–≤–∞—Ç –∞—É–¥–∏–æ
            audio_stream = self.audio_service.start_capture()
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            for segment in self.stt_service.transcribe_stream(audio_stream):
                segment.start_time = (datetime.now() - self.start_time).total_seconds()
                self.segments.append(segment)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
                for observer in self.observers:
                    observer.on_new_segment(segment)
                    
        except KeyboardInterrupt:
            logger.info("–í—Å—Ç—Ä–µ—á–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: {e}")
        finally:
            self.stop_meeting()
    
    def stop_meeting(self):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å—Ç—Ä–µ—á—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞–º–º–∞—Ä–∏.
        
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞–º–º–∞—Ä–∏
        –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã.
        
        Returns:
            tuple: (summary, transcript_path, summary_path) - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        """
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏")
        self.is_meeting_active = False
        self.audio_service.stop_capture()
        
        if self.segments:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            processed_segments = self.transcript_processor.process_segments(self.segments)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            transcript = MeetingTranscript(
                segments=processed_segments,
                created_at=self.start_time,
                duration=(datetime.now() - self.start_time).total_seconds()
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            transcript_path = self.save_transcript(transcript)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏
            full_text = transcript.get_full_text()
            summary = self.summary_service.summarize(full_text)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏
            summary_path = self.save_summary(summary, self.start_time)
            
            # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
            logger.info("=== –°–ê–ú–ú–ê–†–ò –í–°–¢–†–ï–ß–ò ===")
            print(summary)
            logger.info("========================")
            logger.info(f"üíæ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {transcript_path}")
            logger.info(f"üíæ –°–∞–º–º–∞—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {summary_path}")
            
            return summary, transcript_path, summary_path
        else:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∞–º–º–∞—Ä–∏")
            message = "–í—Å—Ç—Ä–µ—á–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª–∞ —Ä–µ—á–∏"
            summary_path = self.save_summary(message, datetime.now())
            return message, None, summary_path
    
    def save_transcript(self, transcript: MeetingTranscript) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ñ–∞–π–ª.
        
        Args:
            transcript: –û–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_dir = "results"
        os.makedirs(results_dir, exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = transcript.created_at.strftime("%Y%m%d_%H%M%S")
        filename = f"transcript_{timestamp}.txt"
        filepath = os.path.join(results_dir, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç {transcript.created_at}\n")
            f.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {transcript.duration:.2f} —Å–µ–∫—É–Ω–¥\n")
            f.write("=" * 50 + "\n\n")
            
            for segment in transcript.segments:
                speaker = segment.speaker or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                f.write(f"[{segment.start_time:.2f}s] {speaker}: {segment.text}\n")
        
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {filepath}")
        return filepath
    
    def save_summary(self, summary: str, created_at: datetime) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∞–º–º–∞—Ä–∏ –≤ —Ñ–∞–π–ª.
        
        Args:
            summary: –¢–µ–∫—Å—Ç —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            created_at: –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_dir = "results"
        os.makedirs(results_dir, exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = created_at.strftime("%Y%m%d_%H%M%S")
        filename = f"summary_{timestamp}.txt"
        filepath = os.path.join(results_dir, filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(f"–°–∞–º–º–∞—Ä–∏ –≤—Å—Ç—Ä–µ—á–∏ –æ—Ç {created_at}\n")
            f.write("=" * 30 + "\n\n")
            f.write(summary)
            f.write("\n")
        
        logger.info(f"–°–∞–º–º–∞—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {filepath}")
        return filepath
